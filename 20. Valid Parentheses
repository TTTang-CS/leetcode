We can solve this by stack.
dic stores the correct combination of parenthese.
x is a stack.
#1 edge case check
for character in s[1:]:
  if s[i] is the left part of parenthese: we add it to stack
  if s[i] is the right part of parenthese:
    if the last element of stack is the corresponding right part: we pop out the element of stack and continue loop
    else: return False
  return True if there are no elements in stack

Time complexity O(len(s))

class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        if not s:
            return True
        
        x = []
        
        dic = {')':'(', ']':'[', '}':'{'} 
        
        if s[0] == ')' or s[0] == '}' or s[0] == "]": # 1
            return False
        else:
            x.append(s[0])
        for i in xrange(1, len(s)):
            if s[i] == '(' or s[i] == '[' or s[i] == '{':
                x.append(s[i])
            else:
                if len(x) == 0:
                    return False
                if x.pop() == dic[s[i]]:
                    continue
                else:
                    return False
                
        if len(x) == 0:
            return True
        else:
            return False
