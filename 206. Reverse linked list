# Solution 1:
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head:
            return None
        cur = head
        head = None
        head = self.recur(cur, head)
        return head
        
    def recur(self, cur, head):
        temp = cur.next
        cur.next = head
        head = cur
        if temp:
            return self.recur(temp, head)
        else:
            return head

A basic recursive soluton. Time complexity is O(N) where N is the length of linked list.

# Solution 2:
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head or not head.next:
            return head
        p = self.reverseList(head.next)
        head.next.next = head
        head.next = None
        return p
        
A good recursive soluton with simplified code structure. Time complexity is still O(N).
If linked list is 1 -> 2 -> 3 -> 4 -> 5
After reverseList reaches the end and return end node, we would get
  1 -> 2 -> 3 -> 4 <- 5

The recursive version is slightly trickier and the key is to work backwards. Assume that the rest of the list had already been reversed, now how do I reverse the front part? Let's assume the list is: n1 → … → nk-1 → nk → nk+1 → … → nm → Ø
Assume from node nk+1 to nm had been reversed and you are at node nk.

n1 → … → nk-1 → nk → nk+1 ← … ← nm

We want nk+1’s next node to point to nk.
So,
nk.next.next = nk;
Be very careful that n1's next must point to Ø. If you forget about this, your linked list has a cycle in it. This bug could be caught if you test your code with a linked list of size 2.
